{
  
    
        "post0": {
            "title": "Title",
            "content": "Fetching data . In order to generate new silk squares, like those designed by Hermès, we will need data, preferably in the form of photos, of the models created by the fashion house. After a little research on the web, we find different sources of data. There are blogs of brand enthusiasts, listing images of squares from various collections. On the Hermès website you can find very good quality images of the latest collections. We will therefore try, first of all, to extract from these different sources what will be the raw material to provide to our algorithm. . The art of extracting data from websites is called data scraping or web scraping. The legal framework for this practice is a bit of a gray area. You must always be careful not to violate the terms of use of the applications or website on which you want to retrieve this data. In addition, this practice sometimes consists of generating multiple requests that may affect the proper functioning of the site or application in question. It is therefore a question of knowing what one does not to be outside the law. . Summary . 1.1 Retrieve images from the Hermès site | 1.2 Retrieve requests to the Hermès website with Mitmproxy | 1.3 Building image urls : understanding the pattern | 1.4 Python code | . . Retrieve images from the Herm&#232;s site. . In order to retrieve the images of the latest collections on the Hermès site, we will have to take an interest in the way their site works. The best way is therefore to go to the page dedicated to the squares and to walk around to see what is going on. . We see that the content of the site loads dynamically. When scrolling to display more products, the site loads new products as they go. It displays products in packages of 40 items. . For those who are already familiar with web scraping, you know it&#39;s a bit of a hassle. We won&#39;t be able to make a simple request to the squares page, and parse the source code to retrieve the links of all the images at once. . One way to do this would be to use a program that controls our browser to scroll and load the different items automatically. Unfortunately (or not) the site is quite good at detecting this kind of program and will not let us do so. . Therefore, we are going to see what is happening in the back kitchen of the site. We want to try to understand the requests sent to the server when, as a user of the site, we scroll to load more items. To do this we will use a tool called mitmproxy. This is a software positioned between our computer and the web server to which we address ourselves when we visit the site, and which will collect the requests that we send to the site, as well as the responses provided by the server hosting the site. . This article is not intended to explain in detail the operation of mitmproxy, or its installation. If you wish to learn more about this tool, I invite you to consult their documentation. For other funny examples of uses, you can check out these resources : . reverse engeniering a private api from couchsurfing website w/ mitmproxy. | reverse engeniering your bookstore app w/ mitmproxy. | . . Retrieve requests to the Herm&#232;s website with Mitmproxy . Once mitmproxy is configured on our computer, we will repeat the experience of browsing the site. This time we will see in real time the requests made by our browser, as well as the responses from their server. We see that there are a lot of requests, and we will have to inspect them one by one to find what we are looking for. Namely, how is formulated the request that tells the site to load products on the page. . It&#39;s when you try to load more elements than those displayed on the base page that you find what you were looking for. A request is sent to a kind of private API which communicates with a database. . When we look more closely at the various query parameters. Pagesize is the number of items to display. Offset, is the number of elements from which it is necessary to start to count the elements to be displayed, and a Sort parameter which indicates the way in which the elements are displayed (here by relevance). . . What is even more interesting is the format of the response. This is a nice json file with the items and details like the page urls for each of them. . . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . Building image urls: understanding the pattern . Each image displayed on the site is accessible as an object via a url. When the site loads, it calls these urls to display the images. To understand how these urls are constructed, we will inspect a few product pages. By right clicking on the image you can get the link to the image. After observing a few urls, we find the following pattern: base_url+1700... . What&#39;s great is that all the information we need to rebuild these urls is all present in the json that we retrieved in the previous step. . So to achieve our goals we need: . Formulate the 5 requests to the &quot;http://&quot; url by varying the offset parameter to retrieve the information of the 200 products (5*40 = 200). - Once the json files have been saved, the data they contain is processed to build the urls of the images of each of the products. | We then send requests to these image urls and record the responses. | . . Python code . Let&#39;s get our hands on the code a bit. With mitmproxy, we can retrieve the request that interests us in the form of curl. We convert this curl request in python thanks to this great tool. Which give : . import requests cookies = { &#39;datadome&#39;: &#39;6dGCGJi7OY-QVuTMNf_Va-ihruAS4fT~-prPt53aTUtSMJ6e2jTRdQI9rOCLxC9775DR1GQRrpLUs~67PZ000nS-WYlYuszR-qNvBG9kGLXYs.yI6CUPOdCrifnldDu&#39;, &#39;ECOM_SESS&#39;: &#39;fcj2587fp2kfmusvhj08lbfbc5&#39;, &#39;correlation_id&#39;: &#39;1808b1db587ebab640cced310efcb6dfdd899ab3eb0c44ea08e3f11ab65441ee&#39;, &#39;_gcl_au&#39;: &#39;1.1.198033202.1643632040&#39;, &#39;_ga&#39;: &#39;GA1.2.706534774.1643632042&#39;, &#39;_gid&#39;: &#39;GA1.2.616364715.1643632042&#39;, &#39;GeoFilteringBanner&#39;: &#39;1&#39;, &#39;_uetsid&#39;: &#39;241e11c0829111eca0f5e908623d4c81&#39;, &#39;_uetvid&#39;: &#39;241e4b10829111ecb2360bf65e216a0f&#39;, &#39;_ga_Y862HCHCQ7&#39;: &#39;GS1.1.1643632042.1.0.1643632045.0&#39;, &#39;_cs_c&#39;: &#39;1&#39;, &#39;_cs_id&#39;: &#39;116f9e30-3c8e-acbc-ecf4-8ef80963d888.1643632043.1.1643632043.1643632043.1.1677796043154&#39;, &#39;ABTasty&#39;: &#39;uid=hs12gaez8thx8txq&amp;fst=1643632043261&amp;pst=-1&amp;cst=1643632043261&amp;ns=1&amp;pvt=1&amp;pvis=1&amp;th=&#39;, } headers = { &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:96.0) Gecko/20100101 Firefox/96.0&#39;, &#39;Accept&#39;: &#39;application/json, text/plain, */*&#39;, &#39;Accept-Language&#39;: &#39;fr,fr-FR;q=0.8,en-US;q=0.5,en;q=0.3&#39;, &#39;Origin&#39;: &#39;https://www.hermes.com&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Referer&#39;: &#39;https://www.hermes.com/&#39;, &#39;Sec-Fetch-Dest&#39;: &#39;empty&#39;, &#39;Sec-Fetch-Mode&#39;: &#39;cors&#39;, &#39;Sec-Fetch-Site&#39;: &#39;same-site&#39;, } offset = 40 params = ( (&#39;locale&#39;, &#39;fr_fr&#39;), (&#39;category&#39;, &#39;WOMENSILKSCARVESETC&#39;), (&#39;sort&#39;, &#39;relevance&#39;), (&#39;offset&#39;, offset), (&#39;pagesize&#39;, &#39;40&#39;), ) response = requests.get(&#39;https://bck.hermes.com/products&#39;, headers=headers, params=params, cookies=cookies) . When we make our request, the server returns a json file. The first item in the list of items in this file is displayed. . json_response = response.json() items = json_response[&#39;products&#39;][&#39;items&#39;] print(items[0]) . {&#39;sku&#39;: &#39;H892813S 16&#39;, &#39;title&#39;: &#39;Gavroche 45 Della Cavalleria&#39;, &#39;productCode&#39;: &#39;S102&#39;, &#39;perso_product_type&#39;: &#39;silk&#39;, &#39;assets&#39;: [{&#39;url&#39;: &#39;//assets.hermes.com/is/image/hermesproduct/892813S%2016_flat_1?a=a&amp;size=3000,3000&amp;extend=300,300,300,300&amp;align=0,0&#39;, &#39;type&#39;: &#39;image&#39;, &#39;source&#39;: &#39;scene7&#39;}, {&#39;url&#39;: &#39;//assets.hermes.com/is/image/hermesproduct/892813S%2016_worn_2?a=a&amp;size=3000,3000&amp;extend=0,0,0,0&amp;align=0,0&#39;, &#39;type&#39;: &#39;image&#39;, &#39;source&#39;: &#39;scene7&#39;}], &#39;moreColors&#39;: False, &#39;size&#39;: &#39;SANS_TAILLE&#39;, &#39;avgColor&#39;: &#39;rose&#39;, &#39;departmentCode&#39;: &#39;S&#39;, &#39;familyCode&#39;: &#39;S10&#39;, &#39;divisionCode&#39;: &#39;04&#39;, &#39;price&#39;: 190, &#39;url&#39;: &#39;/product/gavroche-45-della-cavalleria-H892813Sv16&#39;, &#39;slug&#39;: &#39;gavroche-45-della-cavalleria&#39;, &#39;hasStock&#39;: True, &#39;hasStockRetail&#39;: False, &#39;hasStockOrHasStockRetail&#39;: False, &#39;stock&#39;: {&#39;ecom&#39;: True, &#39;retail&#39;: False}, &#39;personalize&#39;: True} . urls = [] base_url = &#39;https://assets.hermes.com/is/image/hermesproduct/&#39; suffix = &#39;-flat-1-300-0-1700-1700-q99_b.jpg&#39; for item in items: slug = item[&#39;slug&#39;] sku = item[&#39;sku&#39;][1:] url = base_url + slug + &#39;--&#39; + sku + suffix urls.append(url) . print(urls[0]) . https://assets.hermes.com/is/image/hermesproduct/gavroche-45-della-cavalleria--892813S 16-flat-1-300-0-1700-1700-q99_b.jpg . image_url = urls[0] response = requests.get(url=image_url, headers=headers, cookies=cookies) bytes_image = response.content jpeg_img = bytearray(bytes_image) f = open(&#39;image.jpeg&#39;, &#39;wb&#39;) f.write(jpeg_img) f.close() . &lt;_io.BufferedWriter name=&#39;image.jpeg&#39;&gt; . &lt;/div&gt; .",
            "url": "https://victor4v.github.io/myblog/2022/02/02/mitm.html",
            "relUrl": "/2022/02/02/mitm.html",
            "date": " • Feb 2, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My first post",
            "content": "import pandas as pd import geopandas as gpd from shapely import wkt import altair as alt import plotly.express as px from IPython.display import HTML . . df = pd.read_csv(&#39;./data/caen.csv&#39;) . . fig = px.choropleth_mapbox(gdf, geojson=gdf.geometry, locations=gdf.index, center={&quot;lat&quot;: 49.30, &quot;lon&quot;: -0.5}, mapbox_style=&quot;open-street-map&quot;, hover_data=[&#39;Nom Com. Adj.&#39;, &#39;Code Coms. Adj.&#39;,&#39;Nom Com. Ref&#39;,&#39;NB_HABITANTS&#39;,&#39;INDICE_DENSITE&#39;], opacity = 0.5, zoom=10) fig.update_layout(margin={&quot;r&quot;:100,&quot;t&quot;:20,&quot;l&quot;:20,&quot;b&quot;:20}) #fig.show() HTML(fig.to_html(include_plotlyjs=&#39;cdn&#39;)) . . . .",
            "url": "https://victor4v.github.io/myblog/fastpages/jupyter/2021/11/22/My-First-Post.html",
            "relUrl": "/fastpages/jupyter/2021/11/22/My-First-Post.html",
            "date": " • Nov 22, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://victor4v.github.io/myblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://victor4v.github.io/myblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://victor4v.github.io/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://victor4v.github.io/myblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}